// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/repository/interface.go

// Package repository is a generated GoMock package.
package repository

import (
	log "product_storage/internal/entity/log"
	template "product_storage/internal/entity/template"
	transaction "product_storage/internal/transaction"
	sqlnull "product_storage/tools/sqlnull"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// SaveLog mocks base method.
func (m *MockLogger) SaveLog(ts transaction.Session, row log.Row, contractID, seID sqlnull.NullInt64, operLogin sqlnull.NullString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLog", ts, row, contractID, seID, operLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockLoggerMockRecorder) SaveLog(ts, row, contractID, seID, operLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockLogger)(nil).SaveLog), ts, row, contractID, seID, operLogin)
}

// SaveLogDetails mocks base method.
func (m *MockLogger) SaveLogDetails(ts transaction.Session, logID int, details map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogDetails", ts, logID, details)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLogDetails indicates an expected call of SaveLogDetails.
func (mr *MockLoggerMockRecorder) SaveLogDetails(ts, logID, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogDetails", reflect.TypeOf((*MockLogger)(nil).SaveLogDetails), ts, logID, details)
}

// SaveLogWithReturnID mocks base method.
func (m *MockLogger) SaveLogWithReturnID(ts transaction.Session, row log.Row, contractID, seID sqlnull.NullInt64, operLogin sqlnull.NullString) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogWithReturnID", ts, row, contractID, seID, operLogin)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLogWithReturnID indicates an expected call of SaveLogWithReturnID.
func (mr *MockLoggerMockRecorder) SaveLogWithReturnID(ts, row, contractID, seID, operLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogWithReturnID", reflect.TypeOf((*MockLogger)(nil).SaveLogWithReturnID), ts, row, contractID, seID, operLogin)
}

// MockTemplate is a mock of Template interface.
type MockTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateMockRecorder
}

// MockTemplateMockRecorder is the mock recorder for MockTemplate.
type MockTemplateMockRecorder struct {
	mock *MockTemplate
}

// NewMockTemplate creates a new mock instance.
func NewMockTemplate(ctrl *gomock.Controller) *MockTemplate {
	mock := &MockTemplate{ctrl: ctrl}
	mock.recorder = &MockTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplate) EXPECT() *MockTemplateMockRecorder {
	return m.recorder
}

// FindTemplateObj mocks base method.
func (m *MockTemplate) FindTemplateObj(ts transaction.Session, id int) (template.TemplateObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTemplateObj", ts, id)
	ret0, _ := ret[0].(template.TemplateObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTemplateObj indicates an expected call of FindTemplateObj.
func (mr *MockTemplateMockRecorder) FindTemplateObj(ts, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTemplateObj", reflect.TypeOf((*MockTemplate)(nil).FindTemplateObj), ts, id)
}

// LoadAllTemplateObj mocks base method.
func (m *MockTemplate) LoadAllTemplateObj(ts transaction.Session) ([]template.TemplateObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAllTemplateObj", ts)
	ret0, _ := ret[0].([]template.TemplateObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAllTemplateObj indicates an expected call of LoadAllTemplateObj.
func (mr *MockTemplateMockRecorder) LoadAllTemplateObj(ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAllTemplateObj", reflect.TypeOf((*MockTemplate)(nil).LoadAllTemplateObj), ts)
}
